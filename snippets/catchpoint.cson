'.source.cps':

    'open':
        'prefix': 'open'
        'body': 'open(${1:"http://", "GET"})$2'
        'description': 'Open endpoint/URL'
        'rightLabelHTML': '<span style="color:#ea5906">open(url, method)</span>'
    'setStepName':
        'prefix': 'setStepName'
        'body': 'setStepName(${1:"name"})$2'
        'description': 'To assign names to each step a transaction creates'
        'rightLabelHTML': '<span style="color:#ea5906">setStepName(stepName)</span>'
    'setNavigatePostData':
        'prefix': 'setNavigatePostData'
        'body': 'setNavigatePostData(${1:"data"})$2'
        'description': 'This command is used to send POST data to the root request. Adding this command after open command converts the request to a POST request which by default will be a GET request.'
        'rightLabelHTML': '<span style="color:#ea5906">setNavigatePostData(data)</span>'
    'setHeader':
        'prefix': 'setHeader'
        'body': 'setHeader(${1:"key", "value", "pattern <optional>"})$2'
        'description': 'Used for dynamically assigning a particular HTTP request header for either the root-request (when no child-request-pattern is used) or child-requests (if the child-request-pattern is used).'
        'rightLabelHTML': '<span style="color:#ea5906">setHeader(key, value, pattern <optional>)</span>'
    'setHeaderAll':
        'prefix': 'setHeaderAll'
        'body': 'setHeaderAll(${1:"key", "value"})$2'
        'description': 'Same as "setHeader", except it will apply to all steps of a transaction. It dynamically assigns particular HTTP request header for either the root-request (when no child-request pattern is used) or child-request (if child-request pattern is used) for all steps of a transaction.'
        'rightLabelHTML': '<span style="color:#ea5906">setHeader(key, value, pattern <optional>)</span>'
    'storeGlobalVariable':
        'prefix': 'storeGlobalVariable'
        'body': 'storeGlobalVariable(${1:"<macros>", ""<name>"})$2'
        'description': 'This transaction verb is used to store the variable data globally, and this data can be used later on via the "${globalVariable(â€¦)}" macro.'
        'rightLabelHTML': '<span style="color:#ea5906">storeGlobalVariable(&lt;macros&gt;, &lt;name&gt;)</span>'
    'assert':
        'prefix': 'assert'
        'body': 'assert(${1:"<macros>/text"})$2'
        'description': 'This command tests the current response with a simple text which can be the output of a macro. It becomes valid if the text is found in the response.'
        'rightLabelHTML': '<span style="color:#ea5906">assert(&lt;macros&gt;/text)</span>'
    'assertHttpResponseCode':
        'prefix': 'assertHttpResponseCode'
        'body': 'assertHttpResponseCode(${1:"<macros>/text"})$2'
        'description': 'This command tests the current HTTP response code with a text pattern which can be the output of a macro, e.g. "200". It becomes valid if the text is same as the response code.'
        'rightLabelHTML': '<span style="color:#ea5906">assertHttpResponseCode(&lt;macros&gt;/text)</span>'
    'assertHttpResponseHeader':
        'prefix': 'assertHttpResponseHeader'
        'body': 'assertHttpResponseHeader(${1:"<macros>/responseHeaderKey","<macros>/text"})$2'
        'description': 'This command tests the value of a key of the current HTTP response header with a text pattern which can be the output of a macro, e.g. "id12345". It becomes valid if the text is found in the header key.'
        'rightLabelHTML': '<span style="color:#ea5906">assertHttpResponseHeader(&lt;macros&gt;/responseHeaderKey&lt;macros&gt;/text)</span>'
    'assertNotHttpResponseCode':
        'prefix': 'assertNotHttpResponseCode'
        'body': 'assertNotHttpResponseCode(${1:"<macros>/text"})$2'
        'description': 'This command tests the current HTTP response code with a text pattern which can be the output of a macro, e.g. "404". It becomes valid if the text is NOT the same as the response code.'
        'rightLabelHTML': '<span style="color:#ea5906">assertNotHttpResponseCode(&lt;macros&gt;/text)</span>'
    'assertNotHttpResponseHeader':
        'prefix': 'assertNotHttpResponseHeader'
        'body': 'assertNotHttpResponseHeader(${1:"<macros>/responseHeaderKey","<macros>/text"})$2'
        'description': 'This command tests the value of a key of the current HTTP response header with a text pattern which can be the output of a macro, e.g. "id12345". It becomes valid if the text is NOT found in the header key.'
        'rightLabelHTML': '<span style="color:#ea5906">assertNotHttpResponseHeader(&lt;macros&gt;/responseHeaderKey&lt;macros&gt;/text)</span>'
